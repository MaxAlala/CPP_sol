//        const int size = 2;
//        visualization_msgs::Marker markers[size];
//        for (int i = 0; i < size; i++) {
//            // Set the frame ID and timestamp.  See the TF tutorials for information on these.
//            markers[i].header.frame_id = "/camera";
//            markers[i].header.stamp = ros::Time::now();
//
//            // Set the namespace and id for this marker.  This serves to create a unique ID
//            // Any marker sent with the same namespace and id will overwrite the old one
//            markers[i].ns = "basic_shapes";
//            markers[i].id = i;
//
//
//            // Set the marker type.  Initially this is CUBE, and cycles between that and SPHERE, ARROW, and CYLINDER
//            if (i % 2 == 0) markers[i].type = visualization_msgs::Marker::MESH_RESOURCE;
//            else
//                markers[i].type = visualization_msgs::Marker::TEXT_VIEW_FACING;
//
//            // Set the marker action.  Options are ADD, DELETE, and new in ROS Indigo: 3 (DELETEALL)
//            markers[i].action = visualization_msgs::Marker::ADD;
//
//            // Set the pose of the marker.  This is a full 6DOF pose relative to the frame/time specified in the header
//            if (i % 2 == 0) {
//                markers[i].pose.position.x = position_of_the_first_match[0];
//                markers[i].pose.position.y = position_of_the_first_match[1];
//                markers[i].pose.position.z = position_of_the_first_match[2];
//            } else {
//                markers[i].pose.position.x = position_of_the_first_match[0];
//                markers[i].pose.position.y = position_of_the_first_match[1];
//                markers[i].pose.position.z = position_of_the_first_match[2];
//            }
//
//            markers[i].pose.orientation.x = r_quat.x();
//            markers[i].pose.orientation.y = r_quat.y();
//            markers[i].pose.orientation.z = r_quat.z();
//            markers[i].pose.orientation.w = r_quat.w();
//            // Set the scale of the marker -- 1x1x1 here means 1m on a side
//            if (i % 2 == 0) {
//                markers[i].scale.x = 0.15;
//                markers[i].scale.y = 0.15;
//                markers[i].scale.z = 0.15;
//            } else {
//
//                markers[i].scale.x = 5;
//                markers[i].scale.y = 5;
//                markers[i].scale.z = 5;
//
//            }
//            // Set the color -- be sure to set alpha to something non-zero!
//            markers[i].color.r = 153.0f;
//            markers[i].color.g = 0.0f;
//            markers[i].color.b = 153.0f;
//            markers[i].color.a = 0.7;
//
//            if (i % 2 == 0) markers[i].mesh_resource = "package://using_markers/src/AX-01b_bearing_box.stl";
//            else markers[i].text = "DETECTED DETAIL";
//            markers[i].lifetime = ros::Duration();
//
//        }
//        // Publish the marker
//        while (marker_pub.getNumSubscribers() < 1) {
//            if (!ros::ok()) {
//                break;
//            }
//            ROS_WARN_ONCE("Please create a subscriber to the marker");
//            sleep(1);
//        }
//        for (int i = 0; i < size; i++)
//            marker_pub.publish(markers[i]);

        // Cycle between different shapes
        //    switch (shape)
        //    {
        //    case visualization_msgs::Marker::CUBE:
        //      shape = visualization_msgs::Marker::SPHERE;
        //      break;
        //    case visualization_msgs::Marker::SPHERE:
        //      shape = visualization_msgs::Marker::ARROW;
        //      break;
        //    case visualization_msgs::Marker::ARROW:
        //      shape = visualization_msgs::Marker::CYLINDER;
        //      break;
        //    case visualization_msgs::Marker::CYLINDER:
        //      shape = visualization_msgs::Marker::CUBE;
        //      break;
        //    }
